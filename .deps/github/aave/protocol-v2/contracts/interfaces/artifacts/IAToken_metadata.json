{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "BalanceTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "Burn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "underlyingAsset",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "treasury",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "incentivesController",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "aTokenDecimals",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "aTokenName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "aTokenSymbol",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "Mint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "UNDERLYING_ASSET_ADDRESS",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "receiverOfUnderlying",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getIncentivesController",
				"outputs": [
					{
						"internalType": "contract IAaveIncentivesController",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getScaledUserBalanceAndSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "handleRepayment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ILendingPool",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "treasury",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "underlyingAsset",
						"type": "address"
					},
					{
						"internalType": "contract IAaveIncentivesController",
						"name": "incentivesController",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "aTokenDecimals",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "aTokenName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "aTokenSymbol",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "mint",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "mintToTreasury",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "scaledBalanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scaledTotalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferOnLiquidation",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferUnderlyingTo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"BalanceTransfer(address,address,uint256,uint256)": {
					"details": "Emitted during the transfer action",
					"params": {
						"from": "The user whose tokens are being transferred",
						"index": "The new liquidity index of the reserve*",
						"to": "The recipient",
						"value": "The amount being transferred"
					}
				},
				"Burn(address,address,uint256,uint256)": {
					"details": "Emitted after aTokens are burned",
					"params": {
						"from": "The owner of the aTokens, getting them burned",
						"index": "The new liquidity index of the reserve*",
						"target": "The address that will receive the underlying",
						"value": "The amount being burned"
					}
				},
				"Mint(address,uint256,uint256)": {
					"details": "Emitted after the mint action",
					"params": {
						"from": "The address performing the mint",
						"index": "The new liquidity index of the reserve*",
						"value": "The amount being"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"UNDERLYING_ASSET_ADDRESS()": {
					"details": "Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)*"
				},
				"allowance(address,address)": {
					"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
				},
				"approve(address,uint256)": {
					"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
				},
				"balanceOf(address)": {
					"details": "Returns the amount of tokens owned by `account`."
				},
				"burn(address,address,uint256,uint256)": {
					"details": "Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`",
					"params": {
						"amount": "The amount being burned",
						"index": "The new liquidity index of the reserve*",
						"receiverOfUnderlying": "The address that will receive the underlying",
						"user": "The owner of the aTokens, getting them burned"
					}
				},
				"getIncentivesController()": {
					"details": "Returns the address of the incentives controller contract*"
				},
				"getScaledUserBalanceAndSupply(address)": {
					"details": "Returns the scaled balance of the user and the scaled total supply.",
					"params": {
						"user": "The address of the user"
					},
					"returns": {
						"_0": "The scaled balance of the user",
						"_1": "The scaled balance and the scaled total supply*"
					}
				},
				"handleRepayment(address,uint256)": {
					"details": "Invoked to execute actions on the aToken side after a repayment.",
					"params": {
						"amount": "The amount getting repaid*",
						"user": "The user executing the repayment"
					}
				},
				"initialize(address,address,address,address,uint8,string,string,bytes)": {
					"details": "Initializes the aToken",
					"params": {
						"aTokenDecimals": "The decimals of the aToken, same as the underlying asset's",
						"aTokenName": "The name of the aToken",
						"aTokenSymbol": "The symbol of the aToken",
						"incentivesController": "The smart contract managing potential incentives distribution",
						"pool": "The address of the lending pool where this aToken will be used",
						"treasury": "The address of the Aave treasury, receiving the fees on this aToken",
						"underlyingAsset": "The address of the underlying asset of this aToken (E.g. WETH for aWETH)"
					}
				},
				"mint(address,uint256,uint256)": {
					"details": "Mints `amount` aTokens to `user`",
					"params": {
						"amount": "The amount of tokens getting minted",
						"index": "The new liquidity index of the reserve",
						"user": "The address receiving the minted tokens"
					},
					"returns": {
						"_0": "`true` if the the previous balance of the user was 0"
					}
				},
				"mintToTreasury(uint256,uint256)": {
					"details": "Mints aTokens to the reserve treasury",
					"params": {
						"amount": "The amount of tokens getting minted",
						"index": "The new liquidity index of the reserve"
					}
				},
				"scaledBalanceOf(address)": {
					"details": "Returns the scaled balance of the user. The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index at the moment of the update",
					"params": {
						"user": "The user whose balance is calculated"
					},
					"returns": {
						"_0": "The scaled balance of the user*"
					}
				},
				"scaledTotalSupply()": {
					"details": "Returns the scaled total supply of the variable debt token. Represents sum(debt/index)",
					"returns": {
						"_0": "The scaled total supply*"
					}
				},
				"totalSupply()": {
					"details": "Returns the amount of tokens in existence."
				},
				"transfer(address,uint256)": {
					"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
				},
				"transferFrom(address,address,uint256)": {
					"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
				},
				"transferOnLiquidation(address,address,uint256)": {
					"details": "Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken",
					"params": {
						"from": "The address getting liquidated, current owner of the aTokens",
						"to": "The recipient",
						"value": "The amount of tokens getting transferred*"
					}
				},
				"transferUnderlyingTo(address,uint256)": {
					"details": "Transfers the underlying asset to `target`. Used by the LendingPool to transfer assets in borrow(), withdraw() and flashLoan()",
					"params": {
						"amount": "The amount getting transferred",
						"user": "The recipient of the underlying"
					},
					"returns": {
						"_0": "The amount transferred*"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/github/aave/protocol-v2/contracts/interfaces/IAToken.sol": "IAToken"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/github/aave/protocol-v2/contracts/dependencies/openzeppelin/contracts/IERC20.sol": {
			"keccak256": "0x6406b04abfeda2c8c80ea3faf797ce4501e66db41fb6ff4e299ebe0402879f44",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://33b0db81db37bd6fe20aa0b23581c6b0edef2f3c49d0bd88b4fe46c1164adb00",
				"dweb:/ipfs/QmYn1zYwt3ahpkLYwHh6h5b1UJrzP2xy5G3at9oEVNw2c1"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IAToken.sol": {
			"keccak256": "0x075d88d8db3fc9104b5305c9630fc7496a72d73ce2651a21dea6949b2b1cf39f",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://d3f0f4590b55abb6d5b009c623a496554b5778cdbaaae3759eb0aa5a598e8ef3",
				"dweb:/ipfs/QmNf4Fv7CaCEbRKs3KHcMzT123BYoL8qp7PrEmN6beYxaR"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IAaveIncentivesController.sol": {
			"keccak256": "0xaf1715fc0e27c5b1ec453688b584f0301d51fe0848e95f5d074c58ba1e8dcbce",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://73c0d5db6281b66180e61c5fd0a0a488e0287b03f88908f0b46af4f36039e299",
				"dweb:/ipfs/Qma4PaS8MbbnQornei7ZuXyBBmDpVfiSXQfeNNWXNWABSG"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IInitializableAToken.sol": {
			"keccak256": "0x912c36122a398266facaa3b55efc1836511a58c7750b7acad2ed542c08f8d0b6",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://1f776f76370fcd58173a54cc2d1a07a2a7fe6fa5ea4778f64c00260a37a277b3",
				"dweb:/ipfs/QmbotuTWT6qo9HhmUWTtA1GQzWQMWgLcQuALTxm8jRx5eu"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/ILendingPool.sol": {
			"keccak256": "0x5fa85a3137312e0d37602723af7408ed97636028699bdf7a7c7cc2dc34cdbafc",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://2f084d52067cbb14f10a00813b17c386681e17e295f878d3d8992cef63e67ac1",
				"dweb:/ipfs/QmWGjEYp4ZHmMxW7zkV8ctsmpc5kAYDw3yqaf1LZGsFFuJ"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/ILendingPoolAddressesProvider.sol": {
			"keccak256": "0xcb0e2c4c19c0bde86907b6ab45b6a1db4932d3642fc51410d56c9411a65b9f1d",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://38d01c9e664c64d46a15bbbda2933b5fb877d33f6746d2db32563962beea9119",
				"dweb:/ipfs/QmajEmcQZz3E6GzmLpeGvnEswuwCjVYy8svqdx8bxi4PuG"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IScaledBalanceToken.sol": {
			"keccak256": "0x03f77c8f37be8f08723b82ccc7c000da0152839632a5c3952c292a2ea0b1b491",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://c8cbe31d5cd705ef15b40c0d9a48dace17797a314fa1d8d93edd412537e8ac98",
				"dweb:/ipfs/QmYuKD5D5NVakZ41XRxHvMUXUG4Hn83E9YyxJMrMCjPZxd"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/types/DataTypes.sol": {
			"keccak256": "0xb1d3ae94d3e4b3bf23b3394d820a3a2b5ba56fd5389f561f3fdd73ed1c60c391",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://47c11d578cc1e0df27e4e85cfe5831a48b78d6e939d34e17db4bc65a54c899fe",
				"dweb:/ipfs/QmYdYLkYFJe3psmQUH1S1uNhGE9xyxeDunuEW9gBPg9vDB"
			]
		}
	},
	"version": 1
}